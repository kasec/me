import{u as n,c as a,o as s,g as t}from"./vendor.221782d8.js";const p={class:"markdown-body"},o=t('<h1>Como funciona exactamente React</h1><h2>Como hace <strong>React</strong> para renderear sus componentes asi como tambien como utilizar <code>useCallback</code> y <code>useMemo</code></h2><blockquote><p><strong>Para comprender este blog</strong>, doy por hecho ya que tienes un conocimiento minimo sobre el api de React.</p></blockquote><h2>Overview</h2><p>Como <em>React</em> es aparemente muy rapido, <em><strong>re-renderea</strong></em> los componentes hijos cada vez que una accion en especifico es disparada.</p><p>Enseguida mostrare unas piezas de codigo, no te preocupes si no entiendes, tratare de explicarlo sobre la marcha.</p><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// components/count-button.jsx</span>\n<span class="token keyword">const</span> <span class="token function-variable function">CountButton</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">CountButton</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>onClick<span class="token punctuation">,</span> count<span class="token punctuation">,</span> id<span class="token punctuation">}</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rendering [CountButton] with [id] ::&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[count]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[onClick]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>onClick<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">id </span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> count<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  \n<span class="token punctuation">}</span>\n</code></pre><br><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// App.jsx</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rendering [App]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tvalue<span class="token operator">:</span> <span class="token number">0</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> <span class="token function-variable function">increment1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount1</span><span class="token punctuation">(</span>\n\t\t<span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> \n\t\t\tvalue<span class="token operator">:</span> c<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> \n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tvalue<span class="token operator">:</span> <span class="token number">0</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> <span class="token function-variable function">increment2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount2</span><span class="token punctuation">(</span>\n\t\t<span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\tvalue<span class="token operator">:</span> c<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span> \n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CountButton</span></span>\n\t\t\t<span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count1<span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>increment1<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n\t  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CountButton</span></span>\n\t\t\t<span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count2<span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>increment2<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><p>Cuantos <strong>logs</strong> seran mostrados en tus <em><code>devtools</code></em> cada vez que presiones un boton?</p><h3>SPOILERS!!</h3><p>Cada vez que presionas un boton el contador se actualiza, supongo que esto es normal para ti, ademas de eso los componentes que no tienen ninguna dependencia son alterados y vuelven a renderearse.</p><p>Ejemplo: Si das clic al button 1 los logs que se mostraran seran los siguientes:</p><pre class="language-output"><code class="language-output">Rendering [App]\nRendering [CountButton] with [id] :: 1\nRendering [CountButton] with [id] :: 2\n\n[onClick] 1\n[onClick] 2\n\n[count] 1\n</code></pre><p>Despues de ver el output de arriba surgen varias preguntas.</p><p>Como mencione arriba, React renderea todos los componentes hijos sin importar que estos no tengan ninguna <em><strong>dependencia/prop</strong></em> directa del padre, esto no sabemos por que lo hace React pero debe de tener alguna razon.</p><p>Algunos autores mencionan que no hay ninguna razon para temerle a esto ya que React es sumamente <em>rapido</em>, para que esto cause algun problema.</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I rarely use these React performance features:<br><br>React.memo<br>useCallback<br>useMemo<br><br>If I have a performance issue, I usually find I made a mistake or am using a component that merely needs optimized.<a href="https://twitter.com/hashtag/react?src=hash&amp;ref_src=twsrc%5Etfw">#react</a></p>— Cory House (@housecor) <a href="https://twitter.com/housecor/status/1358791451665178634?ref_src=twsrc%5Etfw">February 8, 2021</a></blockquote><blockquote><p>Si gustas puedes leer el <a href="https://kentcdodds.com/blog/usememo-and-usecallback">post de Kent</a>, para conocer mas del tema.</p></blockquote><p>Quedan 2 preguntas por resolver.</p><ol><li>Se puede evitar la renderizacion de elementos no dependientes?</li><li>Porque el <code>onClick</code> <em>prop</em> lo marca como que esta cambiando el valor?</li></ol><h2>Se puede evitar la renderizacion de elementos no dependientes?</h2><p>La respuesta a esto es <strong>SI</strong>, si se puede, en seguida muestro como. `</p><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// components/count-button.jsx</span>\n<span class="token keyword">const</span> CountButton <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">CountButton</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>onClick<span class="token punctuation">,</span> count<span class="token punctuation">,</span> id<span class="token punctuation">}</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rendering [CountButton] with [id] ::&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[count]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\t<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[onClick]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>onClick<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">id </span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> count<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><p>Notas la diferencia en el codigo de arriba?</p><p><a href="https://reactjs.org/docs/react-api.html#reactmemo">React.memo</a>, es un <em><strong>high order component</strong></em>, el cual envuelve tu componente y <a href="https://en.wikipedia.org/wiki/Memoization">memoriza</a> tu componente lo cual permite que no este cambiando/rendereando cada vez que el padre dispara un evento, sino solo si sus props cambian.</p><p>Aunque con esto no es suficiente ya que el <code>onClick</code> prop siempre esta cambiando, esto nos lleva a la siguiente pregunta.</p><h2>Porque el <code>onClick</code> <em>prop</em> lo marca como que esta cambiando el valor?</h2><p>La respuesta es simple, veamos el codigo de <code>App.jsx</code> otra vez.</p><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// App.jsx</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rendering [App]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tvalue<span class="token operator">:</span> <span class="token number">0</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> <span class="token function-variable function">increment1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount1</span><span class="token punctuation">(</span>\n\t\t<span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> \n\t\t\tvalue<span class="token operator">:</span> c<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> \n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tvalue<span class="token operator">:</span> <span class="token number">0</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> <span class="token function-variable function">increment2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount2</span><span class="token punctuation">(</span>\n\t\t<span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\tvalue<span class="token operator">:</span> c<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span> \n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n\t  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CountButton</span></span>\n\t\t\t<span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count1<span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>increment1<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n\t  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CountButton</span></span>\n\t\t\t<span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count2<span class="token punctuation">}</span></span>\n\t\t\t<span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>increment2<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><p>El detalle aqui es que a diferencia de los <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">valores primitivos</a> las funciones son guardadas por referencia, y como sabemos cuando un evento es disparado se renderean todos los componentes.</p><p><code>increment1</code> y <code>increment2</code> al momento que el componente padre vuelve a renderizarse obtienen otro valor, aunque sea el mismo lo guardan en otra referencia, y dentro de los componentes <code>CountButton</code>, obtienen el valor de dicha (nueva)referencia y por el <code>useEffect</code> lo detecta como nuevo.</p><p>Ahora que ya sabemos que es lo que causa la renderizacion aun teniendo <code>React.memo</code> podemos tomar cartas en el asunto para evitar el cambio del valor de <code>increment1</code> y <code>increment2</code></p><p>Lo que usaremos a continuacion para que no cambie el datos sera memoization lo cual usamos arriba.</p><p>React tiene dos hooks que podemos utilizar aqui <code>useMemo</code> y <code>useCallback</code>, en este caso usaremos <code>useCallback</code>. Estos hooks los que hacen principalmente es <em>memorizar</em> el valor y no lo cambian siempre y cuando alguna dependencia como tal cambie, esto evita que <em>computaciones complejas se esten ejecutando en cada renderizacion</em>. En este caso nosotros la utilizaremos para que nuestros componentes hijos se rendericen cuando sea nesesario.</p><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// App.jsx</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">const</span> increment1 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount1</span><span class="token punctuation">(</span>\n\t\t<span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> \n\t\t\tvalue<span class="token operator">:</span> c<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> \n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\n\t<span class="token keyword">const</span> increment2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount2</span><span class="token punctuation">(</span>\n\t\t<span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\tvalue<span class="token operator">:</span> c<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> \n\t\t\t... \n\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><p>Lo unico que hicimos arriba fue envolver nuestras funciones en el hook de React, ahora cuando presiones un boton <strong>1</strong> solo mostrara los siguientes logs:</p><pre class="language-output"><code class="language-output">Rendering [App]\nRendering [CountButton] with [id] :: 1\n\n[count] 1\n</code></pre><h1>Resumen</h1><p>Que es lo que vimos?</p><ul><li>Como Funciona React.</li><li><a href="https://reactjs.org/docs/react-api.html#reactpurecomponent">Como crear un component puro</a>.</li><li>Como funcionan las funciones en js.</li><li>Memoization.</li><li><code>useCallback</code> React Hook.</li></ul><h1>Bonus</h1><p>Si llegaste hasta aqui, gracias por leer este post, espero y te haya resultado de bastante ayuda.</p><p>Igual si tienes alguna observacion y/o duda puedes contactarme en alguna de mis redes sociales, que estan abajo(solo dale clic/tap al footer), me gustaria saber que piensas que y con gusto cuando tenga tiempo te respondere.</p>',44),e={expose:[],setup:t=>(n({meta:[]}),(n,t)=>(s(),a("div",p,[o])))};export default e;
